/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.iso.converter.iso8583converter;
import com.formdev.flatlaf.FlatLightLaf;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.xml.parsers.ParserConfigurationException;
import org.jpos.util.Logger;
import org.jpos.iso.ISOException;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.packager.GenericPackager;
import org.jpos.util.SimpleLogListener;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import org.w3c.dom.*;
import org.xml.sax.SAXException;
import org.xml.sax.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
/**
 *
 * @author Fahmi
 */
public class Converter extends javax.swing.JFrame {

    private boolean isAdd = false;
    private String scriptPath = "";
    private String selectedScriptPath = "";
    /**
     * Creates new form Converter
     */
    public Converter() {
        setSize(520, 441);
        setLocationRelativeTo(null);
        setResizable(false); // maximize button disable
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
        setTitle("ISO8583 Converter");
        
        initComponents();
        resultOutput.hide();
        resultInputText.setEditable(false);
        
        defaultButton.addActionListener((ActionEvent e) -> {
            if (defaultButton.isSelected()) {
                selectedButton.setSelected(false);
            } else {
                if (!selectedButton.isSelected()) {
                    defaultButton.setSelected(true);
                }
            }
        });
        
        selectedButton.addActionListener((ActionEvent e) -> {
            if (selectedButton.isSelected()) {
                defaultButton.setSelected(false);
            } else {
                if (!defaultButton.isSelected()) {
                    selectedButton.setSelected(true);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        hexTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultInputText = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        hexInputText = new javax.swing.JTextArea();
        hexTitle1 = new javax.swing.JLabel();
        convertButton = new javax.swing.JButton();
        resultOutput = new javax.swing.JLabel();
        bitmapText = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        defaultButton = new javax.swing.JRadioButton();
        selectedButton = new javax.swing.JRadioButton();
        fileText = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        importScriptMenu = new javax.swing.JMenuItem();
        exportResultMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        viewLogMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("ISO8583 Converter");

        hexTitle.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        hexTitle.setText("Hex Dump");

        resultInputText.setColumns(20);
        resultInputText.setRows(5);
        jScrollPane1.setViewportView(resultInputText);

        hexInputText.setColumns(20);
        hexInputText.setRows(5);
        jScrollPane2.setViewportView(hexInputText);

        hexTitle1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        hexTitle1.setText("Result");

        convertButton.setText("CONVERT");
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        resultOutput.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        resultOutput.setForeground(new java.awt.Color(255, 51, 51));
        resultOutput.setText("Invalid Input");

        bitmapText.setText("BITMAP : ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Test Script : ");

        defaultButton.setSelected(true);
        defaultButton.setText("Default");
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });

        selectedButton.setText("Selected");
        selectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedButtonActionPerformed(evt);
            }
        });

        fileText.setText("Script :   ");

        jMenu1.setText("File");

        importScriptMenu.setText("Import Script");
        importScriptMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importScriptMenuActionPerformed(evt);
            }
        });
        jMenu1.add(importScriptMenu);

        exportResultMenu.setText("Export Result");
        jMenu1.add(exportResultMenu);

        exitMenu.setText("Exit");
        jMenu1.add(exitMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        viewLogMenu.setText("View Log");
        jMenu2.add(viewLogMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(resultOutput)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(hexTitle)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(bitmapText)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(convertButton))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hexTitle1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(defaultButton)
                        .addGap(18, 18, 18)
                        .addComponent(selectedButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileText)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(defaultButton)
                    .addComponent(selectedButton)
                    .addComponent(fileText))
                .addGap(18, 18, 18)
                .addComponent(hexTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(convertButton)
                    .addComponent(bitmapText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hexTitle1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resultOutput)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed
        // TODO add your handling code here:
        resultInputText.setText("");
        resultOutput.hide();
        bitmapText.hide();
        isAdd = false;
        try { 
            String getField = hexInputText.getText().substring(4, 20);
            byte[] hexField = hexStringToByteArray(getField);
            String binary = toBinary(hexField);
           
            char[] toBinaryChar = binary.toCharArray();
            List<Integer> bitmap = new ArrayList<>();
            
            for(int i = 0; i < toBinaryChar.length; i++) {
                if (toBinaryChar[i] == '1') {
                   bitmap.add(i + 1);
               }
            }
         
            StringBuilder fieldString = new StringBuilder();
            bitmap.stream().map(field -> {
                fieldString.append(field);
                return field;
            }).filter(field -> (!Objects.equals(field, bitmap.get(bitmap.size() -1)))).forEachOrdered(_item -> {
                fieldString.append(", ");
            });
            
            bitmapText.setText("BITMAP : {" + fieldString + "}");
            bitmapText.show();
            //fetch xml file and locate exact field            
            if (defaultButton.isSelected()) {
                File fXmlFile = new File("C:/Users/Fahmi/Documents/NetBeansProjects/Iso8583Converter/packager/default.xml");
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(fXmlFile);

                //optional, but recommended
                doc.getDocumentElement().normalize();

                resultOutput.setText("Processing...");
                resultOutput.show();

                NodeList nList = doc.getElementsByTagName("isofield");

                Document docCreate = dBuilder.newDocument();

                // root element
                Element rootElement = docCreate.createElement("isopackager");
                docCreate.appendChild(rootElement);

                bitmap.forEach(field -> {
                    for (int temp = 0; temp < nList.getLength(); temp++) {
                        Node nNode = nList.item(temp);
                        if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                            Element eElement = (Element) nNode;
                            int id = Integer.parseInt(eElement.getAttribute("id"));
                            int length = Integer.parseInt(eElement.getAttribute("length"));
                            String name = eElement.getAttribute("name");
                            String className = eElement.getAttribute("class");

                            if (id == 0 || id == 1 || id == 2) {
                                if (!isAdd) {
                                    Element fixedElement = docCreate.createElement("isofield");
                                    rootElement.appendChild(fixedElement);

                                    Attr idAttr = docCreate.createAttribute("id");
                                    idAttr.setValue(String.valueOf(id));
                                    fixedElement.setAttributeNode(idAttr);

                                    Attr lengthAttr = docCreate.createAttribute("length");
                                    lengthAttr.setValue(String.valueOf(length));
                                    fixedElement.setAttributeNode(lengthAttr);

                                    Attr nameAttr = docCreate.createAttribute("name");
                                    nameAttr.setValue(name);
                                    fixedElement.setAttributeNode(nameAttr);

                                    Attr classAttr = docCreate.createAttribute("class");
                                    classAttr.setValue(className);
                                    fixedElement.setAttributeNode(classAttr);

                                    if (id == 2) {
                                        isAdd = true;
                                    }
                                }
                            }

                            if (field == id) {
                                Element fieldElement = docCreate.createElement("isofield");
                                rootElement.appendChild(fieldElement);

                                Attr idAttr = docCreate.createAttribute("id");
                                idAttr.setValue(String.valueOf(id));
                                fieldElement.setAttributeNode(idAttr);

                                Attr lengthAttr = docCreate.createAttribute("length");
                                lengthAttr.setValue(String.valueOf(length));
                                fieldElement.setAttributeNode(lengthAttr);

                                Attr nameAttr = docCreate.createAttribute("name");
                                nameAttr.setValue(name);
                                fieldElement.setAttributeNode(nameAttr);

                                Attr classAttr = docCreate.createAttribute("class");
                                classAttr.setValue(className);
                                fieldElement.setAttributeNode(classAttr);
                            }
                        }
                    }
                });

                DOMSource source = new DOMSource(docCreate);
                scriptPath = "C:/Users/Fahmi/Documents/NetBeansProjects/Iso8583Converter/packager/temp.xml";
                FileWriter writer = new FileWriter(new File(scriptPath));
                StreamResult result = new StreamResult(writer);

                TransformerFactory transformerFactory = TransformerFactory.newInstance();
                Transformer transformer = transformerFactory.newTransformer();

                transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
                transformer.setOutputProperty(OutputKeys.METHOD, "xml");
                DOMImplementation domImpl = docCreate.getImplementation();
                DocumentType doctype = domImpl.createDocumentType("isopackager", "", "genericpackager.dtd");
                transformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, doctype.getSystemId());

                transformer.transform(source, result);
            
            } else if (selectedButton.isSelected()) {
                if (!selectedScriptPath.equals("")) {
                    scriptPath = selectedScriptPath;
                } else {
                    scriptPath = "";
                    resultOutput.setText("Please select script");
                    resultOutput.show();
                }
            }
            
            if (!scriptPath.equals("")) {
                GenericPackager packager = new GenericPackager(scriptPath);
                // Setting packager
                ISOMsg isoMsg = new ISOMsg();
                isoMsg.setPackager(packager);
                Logger logger = new Logger();
                logger.addListener(new SimpleLogListener());

                packager.setLogger(logger, "packager");

                // this is ISO8583 Message that we will Unpack 
                String isoMessage = hexInputText.getText();
                if (!isoMessage.isEmpty()) {
                    isoMessage = isoMessage.replace(" ", "");
                    hexInputText.setText(isoMessage);
                    // second, we unpack the message
                    isoMsg.unpack(isoMessage.getBytes());

                    // last, print the unpacked ISO8583
                    StringBuilder builder = new StringBuilder();

                    if (isoMsg.getMTI().equals("0200")) {
                        if (isoMsg.hasField(3)) {
                            if (isoMsg.getString(3).equals("004000")) {
                                builder.append("Transaction : SALE").append("\n").append("\n");
                            } else if (isoMsg.getString(3).equals("024000")) {
                                builder.append("Transaction : SALE VOID").append("\n").append("\n");
                            }
                        }
                    } else if (isoMsg.getMTI().equals("0500")) {
                        builder.append("Transaction : SETTLEMENT").append("\n").append("\n");
                    }
                    builder.append("MTI : " + isoMsg.getMTI()).append("\n");
                    builder.append("BITMAP : {");

                    for (int i = 1; i<= isoMsg.getMaxField(); i++) {
                        if(isoMsg.hasField(i)) {
                            if (i != isoMsg.getMaxField()) {
                            builder.append(i).append(", ");
                            } else {
                                builder.append(i);
                            }
                        }
                    }

                    builder.append("}\n");

                    for(int i=1; i<=isoMsg.getMaxField(); i++){
                        if(isoMsg.hasField(i)) {
                                builder.append("Field ");
                                builder.append(String.format("%03d" , i)).append(": ");
                                switch (i) {
                                        case 41 -> {
                                            if (isoMsg.getString(i).contains("F")) {
                                                String replaceFirst = isoMsg.getString(i).substring(1);
                                                builder.append(convertHexToString(replaceFirst));
                                            } else {
                                                builder.append(convertHexToString(isoMsg.getString(i)));
                                            }
                                        }
                                        case 42 -> {
                                            if (!isoMsg.getString(41).contains("F")) {
                                                builder.append(convertHexToString( "3" + isoMsg.getString(i)));
                                            }
                                        }
                                        case 55 -> {
                                            builder.append(isoMsg.getString(i).substring(4));
                                        }
                                        case 60 -> {
                                            builder.append(convertHexToString(isoMsg.getString(i).substring(3)));
                                        }
                                        case 61 -> {
                                            builder.append(convertHexToString(isoMsg.getString(i).substring(3)));
                                        }
                                        case 62 -> {
                                            builder.append(convertHexToString(isoMsg.getString(i).substring(3)));
                                        }
                                        case 63 -> {
                                            builder.append(isoMsg.getString(i).substring(4));
                                        }
                                        default -> builder.append(isoMsg.getString(i));
                                    }
                                builder.append("\n");
                        }
                    }

                    resultInputText.setText(builder.toString());
                    resultOutput.setText("Conversion Success");
                } else {
                    resultOutput.setText("Hex Empty");
                    resultOutput.show();
                }
            }
        } catch (ISOException ex) {
            resultOutput.setText(ex.getMessage());
            resultOutput.show();
        } catch (IOException | ParserConfigurationException | DOMException | SAXException | TransformerConfigurationException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_convertButtonActionPerformed

    private void importScriptMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importScriptMenuActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Select a script");
        jfc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("XML File", "xml");
        jfc.addChoosableFileFilter(filter);

        int returnValue = jfc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            fileText.setText("Script : " + jfc.getSelectedFile().getName());
            selectedScriptPath = jfc.getSelectedFile().getPath();
        }
    }//GEN-LAST:event_importScriptMenuActionPerformed

    private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_defaultButtonActionPerformed

    private void selectedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectedButtonActionPerformed

    public static String convertHexToString(String hex){

        StringBuilder sb = new StringBuilder();
        StringBuilder temp = new StringBuilder();

        //49204c6f7665204a617661 split into two characters 49, 20, 4c...
        for( int i=0; i<hex.length()-1; i+=2 ){

            //grab the hex in pairs
            String output = hex.substring(i, (i + 2));
            //convert hex to decimal
            int decimal = Integer.parseInt(output, 16);
            //convert the decimal to character
            sb.append((char)decimal);

            temp.append(decimal);
        }

        return sb.toString();
    }
    
    public static String hexStr2Str(String hexStr) {
        if (hexStr == null || hexStr.length() <= 0) {
            return null;
        }
        String str = "0123456789ABCDEF";
        char[] hexs = hexStr.toCharArray();
        byte[] bytes = new byte[hexStr.length() / 2];
        for (int i = 0; i < bytes.length; i++) {
            int n = str.indexOf(hexs[(2 * i)]) * 16;
            n += str.indexOf(hexs[(2 * i + 1)]);
            bytes[i] = ((byte) (n & 0xFF));
        }
        try {
            return new String(bytes, "ISO-8859-1");
        } catch (UnsupportedEncodingException localUnsupportedEncodingException) {
        }
        return "";
    }
    
    public static byte[] hexStringToByteArray(String hex) {
        int l = hex.length();
        byte[] data = new byte[l / 2];
        for (int i = 0; i < l; i += 2) {
            data[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4)
                    + Character.digit(hex.charAt(i + 1), 16));
        }
        return data;
    }
    
    String toBinary( byte[] bytes ){
        StringBuilder sb = new StringBuilder(bytes.length * Byte.SIZE);
        for( int i = 0; i < Byte.SIZE * bytes.length; i++ )
            sb.append((bytes[i / Byte.SIZE] << i % Byte.SIZE & 0x80) == 0 ? '0' : '1');
        return sb.toString();
    }
    
    private static Document convertStringToDocument(String xmlStr) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();  
        DocumentBuilder builder;  
        try  
        {  
            builder = factory.newDocumentBuilder();  
            Document doc = builder.parse( new InputSource( new StringReader( xmlStr ) ) ); 
            return doc;
        } catch (Exception e) {  
            e.printStackTrace();  
        } 
        return null;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        FlatLightLaf.install();
        
        try {
            UIManager.setLookAndFeel( new FlatLightLaf() );
        } catch( UnsupportedLookAndFeelException ex ) {
            System.err.println( "Failed to initialize LaF" );
        }

        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {                
                new Converter();
            }
        });
    
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bitmapText;
    private javax.swing.JButton convertButton;
    private javax.swing.JRadioButton defaultButton;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenuItem exportResultMenu;
    private javax.swing.JLabel fileText;
    private javax.swing.JTextArea hexInputText;
    private javax.swing.JLabel hexTitle;
    private javax.swing.JLabel hexTitle1;
    private javax.swing.JMenuItem importScriptMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea resultInputText;
    private javax.swing.JLabel resultOutput;
    private javax.swing.JRadioButton selectedButton;
    private javax.swing.JMenuItem viewLogMenu;
    // End of variables declaration//GEN-END:variables
}
